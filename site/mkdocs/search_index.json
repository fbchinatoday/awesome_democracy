{
    "docs": [
        {
            "location": "/", 
            "text": "Heapster Overview\n\n\nHeapster is a monitoring metrics and events processing tool designed to work inside Kubernetes clusters. It consists of 2 components:\n\n\n\n\n\n\nHeapster core that reads \nmetrics\n from Kubernetes cluster nodes (see \nsources\n), \ndo some processing and writes them to permanent storage (see \nsinks\n). \nIt also provides metrics for other Kubernetes components through \nModel API\n.\n\n\n\n\n\n\nEventer that reads events from Kubernetes master (see \nsources\n) and writes them to permanent storage\n(see \nsinks\n).", 
            "title": "Heapster Overview"
        }, 
        {
            "location": "/#heapster-overview", 
            "text": "Heapster is a monitoring metrics and events processing tool designed to work inside Kubernetes clusters. It consists of 2 components:    Heapster core that reads  metrics  from Kubernetes cluster nodes (see  sources ), \ndo some processing and writes them to permanent storage (see  sinks ). \nIt also provides metrics for other Kubernetes components through  Model API .    Eventer that reads events from Kubernetes master (see  sources ) and writes them to permanent storage\n(see  sinks ).", 
            "title": "Heapster Overview"
        }, 
        {
            "location": "/model/", 
            "text": "Heapster Metric Model\n\n\nThe Heapster Model is a structured representation of metrics for Kubernetes clusters, which is exposed through a set of REST API endpoints.\nIt allows the extraction of up to 15 minutes of historical data for any Container, Pod, Node or Namespace in the cluster, as well as the cluster itself (depending on the metric).\n\n\nPlease bear in mind that this is not an official Kubernetes API, we will try to keep it stable but we don't guarantee that we won't change it in the future.\n\n\nUsage\n\n\nThe Heapster Model is enabled by default. The resolution of the model can be configured through\nthe \n-model_resolution\n flag, which will cause the model to store historical data at the specified resolution. If the \n-model_resolution\n flag is not specified, the default resolution of 30 seconds will be used.\n\n\nAPI documentation\n\n\nA detailed documentation of each API endpoint is listed below. \n\n\nAll endpoints ending in \n/metrics/{metric-name}/\n can accept the optional \nstart\n and \nend\n query parameters \nthat represent the start and end time of the requested timeseries. The result\nwill be a list of (Timestamp, Value) pairs in the time range [start, end].\n\nstart\n and \nend\n are strings formatted according to RFC3339. If \nstart\n is not\ndefined, it is assumed as the zero Unix epoch time. If \nend\n is not defined,\nthen all data later than \nstart\n will be returned.\n\n\nCluster-level Metrics\n\n\n/api/v1/model/metrics/\n: Returns a list of available cluster-level metrics.\n\n\n/api/v1/model/metrics/{metric-name}?start=X\nend=Y\n: Returns a set of (Timestamp, Value) \npairs for the requested cluster-level metric, between the time range specified by \nstart\n and \nend\n. \n\n\nNode-level Metrics\n\n\n/api/v1/model/nodes/\n: Returns a list of all available nodes.\n\n\n/api/v1/model/nodes/{node-name}/metrics/\n: Returns a list of available\nnode-level metrics.\n\n\n/api/v1/model/nodes/{node-name}/metrics/{metric-name}?start=X\nend=Y\n: Returns a set of (Timestamp, Value) \npairs for the requested node-level metric, within the time range specified by \nstart\n and \nend\n. \n\n\nNamespace-level Metrics\n\n\n/api/v1/model/namespaces/\n: Returns a list of all available namespaces.\n\n\n/api/v1/model/namespaces/{namespace-name}/metrics/\n: Returns a list of available namespace-level metrics.\n\n\n/api/v1/model/namespaces/{namespace-name}/metrics/{metric-name}?start=X\nend=Y\n: Returns a set of (Timestamp, Value) \npairs for the requested namespace-level metric, within the time range specified by \nstart\n and \nend\n. \n\n\nPod-level Metrics\n\n\n/api/v1/model/namespaces/{namespace-name}/pods/\n: Returns a list of all available pods under a given namespace.\n\n\n/api/v1/model/namespaces/{namespace-name}/pods/{pod-name}/metrics/\n: Returns a list of available pod-level metrics\n\n\n/api/v1/model/namespaces/{namespace-name}/pods/{pod-name}/metrics/{metric-name}?start=X\nend=Y\n: Returns a set of (Timestamp, Value) \npairs for the requested pod-level metric, within the time range specified by \nstart\n and \nend\n. \n\n\nContainer-level Metrics\n\n\nContainer metrics and stats are accessible for both containers that belong to\npods, as well as for free containers running in each node.\n\n\n/api/v1/model/namespaces/{namespace-name}/pods/{pod-name}/containers/\n: Returns a list of all available containers under a given pod.\n\n\n/api/v1/model/namespaces/{namespace-name}/pods/{pod-name}/containers/{container-name}/metrics/\n: Returns a list of available container-level metrics\n\n\n/api/v1/model/namespaces/{namespace-name}/pods/{pod-name}/containers/{container-name}/metrics/{metric-name}?start=X\nend=Y\n: Returns a set of (Timestamp, Value) \npairs for the requested container-level metric, within the time range specified by \nstart\n and \nend\n. \n\n\n/api/v1/model/nodes/{node-name}/freecontainers/\n: Returns a list of all available free containers under a given node.\n\n\n/api/v1/model/nodes/{node-name}/freecontainers/{container-name}/metrics/\n: Returns a list of available container-level metrics\n\n\n/api/v1/model/nodes/{node-name}/freecontainers/{container-name}/metrics/{metric-name}?start=X\nend=Y\n: Returns a set of (Timestamp, Value) \npairs for the requested container-level metric, within the time range specified by \nstart\n and \nend\n. \n\n\nMetric Types\n\n\nAll metrics available in the \nstorage schema\n are also available through the api.", 
            "title": "Model"
        }, 
        {
            "location": "/model/#heapster-metric-model", 
            "text": "The Heapster Model is a structured representation of metrics for Kubernetes clusters, which is exposed through a set of REST API endpoints.\nIt allows the extraction of up to 15 minutes of historical data for any Container, Pod, Node or Namespace in the cluster, as well as the cluster itself (depending on the metric).  Please bear in mind that this is not an official Kubernetes API, we will try to keep it stable but we don't guarantee that we won't change it in the future.", 
            "title": "Heapster Metric Model"
        }, 
        {
            "location": "/model/#usage", 
            "text": "The Heapster Model is enabled by default. The resolution of the model can be configured through\nthe  -model_resolution  flag, which will cause the model to store historical data at the specified resolution. If the  -model_resolution  flag is not specified, the default resolution of 30 seconds will be used.", 
            "title": "Usage"
        }, 
        {
            "location": "/model/#api-documentation", 
            "text": "A detailed documentation of each API endpoint is listed below.   All endpoints ending in  /metrics/{metric-name}/  can accept the optional  start  and  end  query parameters \nthat represent the start and end time of the requested timeseries. The result\nwill be a list of (Timestamp, Value) pairs in the time range [start, end]. start  and  end  are strings formatted according to RFC3339. If  start  is not\ndefined, it is assumed as the zero Unix epoch time. If  end  is not defined,\nthen all data later than  start  will be returned.", 
            "title": "API documentation"
        }, 
        {
            "location": "/model/#cluster-level-metrics", 
            "text": "/api/v1/model/metrics/ : Returns a list of available cluster-level metrics.  /api/v1/model/metrics/{metric-name}?start=X end=Y : Returns a set of (Timestamp, Value) \npairs for the requested cluster-level metric, between the time range specified by  start  and  end .", 
            "title": "Cluster-level Metrics"
        }, 
        {
            "location": "/model/#node-level-metrics", 
            "text": "/api/v1/model/nodes/ : Returns a list of all available nodes.  /api/v1/model/nodes/{node-name}/metrics/ : Returns a list of available\nnode-level metrics.  /api/v1/model/nodes/{node-name}/metrics/{metric-name}?start=X end=Y : Returns a set of (Timestamp, Value) \npairs for the requested node-level metric, within the time range specified by  start  and  end .", 
            "title": "Node-level Metrics"
        }, 
        {
            "location": "/model/#namespace-level-metrics", 
            "text": "/api/v1/model/namespaces/ : Returns a list of all available namespaces.  /api/v1/model/namespaces/{namespace-name}/metrics/ : Returns a list of available namespace-level metrics.  /api/v1/model/namespaces/{namespace-name}/metrics/{metric-name}?start=X end=Y : Returns a set of (Timestamp, Value) \npairs for the requested namespace-level metric, within the time range specified by  start  and  end .", 
            "title": "Namespace-level Metrics"
        }, 
        {
            "location": "/model/#pod-level-metrics", 
            "text": "/api/v1/model/namespaces/{namespace-name}/pods/ : Returns a list of all available pods under a given namespace.  /api/v1/model/namespaces/{namespace-name}/pods/{pod-name}/metrics/ : Returns a list of available pod-level metrics  /api/v1/model/namespaces/{namespace-name}/pods/{pod-name}/metrics/{metric-name}?start=X end=Y : Returns a set of (Timestamp, Value) \npairs for the requested pod-level metric, within the time range specified by  start  and  end .", 
            "title": "Pod-level Metrics"
        }, 
        {
            "location": "/model/#container-level-metrics", 
            "text": "Container metrics and stats are accessible for both containers that belong to\npods, as well as for free containers running in each node.  /api/v1/model/namespaces/{namespace-name}/pods/{pod-name}/containers/ : Returns a list of all available containers under a given pod.  /api/v1/model/namespaces/{namespace-name}/pods/{pod-name}/containers/{container-name}/metrics/ : Returns a list of available container-level metrics  /api/v1/model/namespaces/{namespace-name}/pods/{pod-name}/containers/{container-name}/metrics/{metric-name}?start=X end=Y : Returns a set of (Timestamp, Value) \npairs for the requested container-level metric, within the time range specified by  start  and  end .   /api/v1/model/nodes/{node-name}/freecontainers/ : Returns a list of all available free containers under a given node.  /api/v1/model/nodes/{node-name}/freecontainers/{container-name}/metrics/ : Returns a list of available container-level metrics  /api/v1/model/nodes/{node-name}/freecontainers/{container-name}/metrics/{metric-name}?start=X end=Y : Returns a set of (Timestamp, Value) \npairs for the requested container-level metric, within the time range specified by  start  and  end .", 
            "title": "Container-level Metrics"
        }, 
        {
            "location": "/model/#metric-types", 
            "text": "All metrics available in the  storage schema  are also available through the api.", 
            "title": "Metric Types"
        }, 
        {
            "location": "/source-configuration/", 
            "text": "Configuring sources\n\n\nHeapster can get data from multiple sources (although at this moment we support only one kind - Kubernetes).\nThey are specified in the command line via the \n--source\n flag. The flag takes an argument of the form \nPREFIX:CONFIG[?OPTIONS]\n.\nOptions (optional!) are specified as URL query parameters, separated by \n as normal.\nThis allows each source to have custom configuration passed to it without needing to\ncontinually add new flags to Heapster as new sources are added. This also means\nHeapster can capture metrics from multiple sources at once, potentially even multiple\nKubernetes clusters.\n\n\nCurrent sources\n\n\nKubernetes\n\n\nTo use the kubernetes source add the following flag:\n\n\n--source=kubernetes:\nKUBERNETES_MASTER\n[?\nKUBERNETES_OPTIONS\n]\n\n\n\nIf you're running Heapster in a Kubernetes pod you can use the following flag:\n\n\n--source=kubernetes\n\n\n\nHeapster requires an authentication token to connect with the apiserver securely. By default, Heapster will use the inClusterConfig system to configure the secure connection. This requires kubernetes version \nv1.0.3\n or higher and a couple extra kubernetes configuration steps. Firstly, for your apiserver you must create an SSL certificate pair with a SAN that includes the ClusterIP of the kubernetes service. Look \nhere\n for an example of how to properly generate certs. Secondly, you need to pass the \nca.crt\n that you generated to the \n--root-ca-file\n option of the controller-manager. This will distribute the root CA to \n/var/run/secrets/kubernetes.io/serviceaccount/\n of all pods. If you are using \nABAC\n authorization (as opposed to \nAllowAll\n which is the default), you will also need to give the \nsystem:serviceaccount:\nnamespace-of-heapster\n:default\n readonly access to the cluster (look \nhere\n for more info).\n\n\nIf you don't want to setup inClusterConfig, you can still use Heapster! To run without auth, use the following config:\n\n\n--source=kubernetes:http://\naddress-of-kubernetes-master\n:\nhttp-port\n?inClusterConfig=false\n\n\n\nThis requires the apiserver to be setup completely without auth, which can be done by binding the insecure port to all interfaces (see the apiserver \n--insecure-bind-address\n option) but \nWARNING\n be aware of the security repercussions. Only do this if you trust \nEVERYONE\n on your network.\n\n\nNote: Remove \"monitoring-token\" volume from heaspter controller config if you are running without auth.\n\n\nAlternatively, you can use a heapster-only serviceaccount like this:\n\n\ncat \nEOF | kubectl create -f -\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: heapster\nEOF\n\n\n\n\nThis will generate a token on the API server. You will then need to reference the service account in your Heapster pod spec like this:\n\n\napiVersion: \nv1\n\nkind: \nReplicationController\n\nmetadata:\n  labels:\n    name: \nheapster\n\n  name: \nmonitoring-heapster-controller\n\nspec:\n  replicas: 1\n  selector:\n    name: \nheapster\n\n  template:\n    metadata:\n      labels:\n        name: \nheapster\n\n    spec:\n      serviceAccount: \nheapster\n\n      containers:\n        -\n          image: \nkubernetes/heapster:v0.13.0\n\n          name: \nheapster\n\n          command:\n            - \n/heapster\n\n            - \n--source=kubernetes:http://kubernetes-ro?inClusterConfig=false\nuseServiceAccount=true\nauth=\n\n            - \n--sink=influxdb:http://monitoring-influxdb:80\n\n\n\n\n\nThis will mount the generated token at \n/var/run/secrets/kubernetes.io/serviceaccount/token\n in the Heapster container.\n\n\nThe following options are available:\n\n \ninClusterConfig\n - Use kube config in service accounts associated with Heapster's namespace. (default: true)\n\n \nkubeletPort\n - kubelet port to use (default: \n10255\n)\n\n \nkubeletHttps\n - whether to use https to connect to kubelets (default: \nfalse\n)\n\n \napiVersion\n - API version to use to talk to Kubernetes. Defaults to the version in kubeConfig.\n\n \ninsecure\n - whether to trust kubernetes certificates (default: \nfalse\n)\n\n \nauth\n - client auth file to use. Set auth if the service accounts are not usable.\n* \nuseServiceAccount\n - whether to use the service account token if one is mounted at \n/var/run/secrets/kubernetes.io/serviceaccount/token\n (default: \nfalse\n)\n\n\nThere is also a sub-source for metrics - \nkubernetes.summary_api\n - that uses a slightly different, memory-efficient API for passing data from Kubelet/cAdvisor to Heapster. It supports the same set of options as \nkubernetes\n. Sample usage:\n\n\n - --source=kubernetes.summary_api:''", 
            "title": "Source Configuration"
        }, 
        {
            "location": "/source-configuration/#configuring-sources", 
            "text": "Heapster can get data from multiple sources (although at this moment we support only one kind - Kubernetes).\nThey are specified in the command line via the  --source  flag. The flag takes an argument of the form  PREFIX:CONFIG[?OPTIONS] .\nOptions (optional!) are specified as URL query parameters, separated by   as normal.\nThis allows each source to have custom configuration passed to it without needing to\ncontinually add new flags to Heapster as new sources are added. This also means\nHeapster can capture metrics from multiple sources at once, potentially even multiple\nKubernetes clusters.", 
            "title": "Configuring sources"
        }, 
        {
            "location": "/source-configuration/#current-sources", 
            "text": "", 
            "title": "Current sources"
        }, 
        {
            "location": "/source-configuration/#kubernetes", 
            "text": "To use the kubernetes source add the following flag:  --source=kubernetes: KUBERNETES_MASTER [? KUBERNETES_OPTIONS ]  If you're running Heapster in a Kubernetes pod you can use the following flag:  --source=kubernetes  Heapster requires an authentication token to connect with the apiserver securely. By default, Heapster will use the inClusterConfig system to configure the secure connection. This requires kubernetes version  v1.0.3  or higher and a couple extra kubernetes configuration steps. Firstly, for your apiserver you must create an SSL certificate pair with a SAN that includes the ClusterIP of the kubernetes service. Look  here  for an example of how to properly generate certs. Secondly, you need to pass the  ca.crt  that you generated to the  --root-ca-file  option of the controller-manager. This will distribute the root CA to  /var/run/secrets/kubernetes.io/serviceaccount/  of all pods. If you are using  ABAC  authorization (as opposed to  AllowAll  which is the default), you will also need to give the  system:serviceaccount: namespace-of-heapster :default  readonly access to the cluster (look  here  for more info).  If you don't want to setup inClusterConfig, you can still use Heapster! To run without auth, use the following config:  --source=kubernetes:http:// address-of-kubernetes-master : http-port ?inClusterConfig=false  This requires the apiserver to be setup completely without auth, which can be done by binding the insecure port to all interfaces (see the apiserver  --insecure-bind-address  option) but  WARNING  be aware of the security repercussions. Only do this if you trust  EVERYONE  on your network.  Note: Remove \"monitoring-token\" volume from heaspter controller config if you are running without auth.  Alternatively, you can use a heapster-only serviceaccount like this:  cat  EOF | kubectl create -f -\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: heapster\nEOF  This will generate a token on the API server. You will then need to reference the service account in your Heapster pod spec like this:  apiVersion:  v1 \nkind:  ReplicationController \nmetadata:\n  labels:\n    name:  heapster \n  name:  monitoring-heapster-controller \nspec:\n  replicas: 1\n  selector:\n    name:  heapster \n  template:\n    metadata:\n      labels:\n        name:  heapster \n    spec:\n      serviceAccount:  heapster \n      containers:\n        -\n          image:  kubernetes/heapster:v0.13.0 \n          name:  heapster \n          command:\n            -  /heapster \n            -  --source=kubernetes:http://kubernetes-ro?inClusterConfig=false useServiceAccount=true auth= \n            -  --sink=influxdb:http://monitoring-influxdb:80   This will mount the generated token at  /var/run/secrets/kubernetes.io/serviceaccount/token  in the Heapster container.  The following options are available:   inClusterConfig  - Use kube config in service accounts associated with Heapster's namespace. (default: true)   kubeletPort  - kubelet port to use (default:  10255 )   kubeletHttps  - whether to use https to connect to kubelets (default:  false )   apiVersion  - API version to use to talk to Kubernetes. Defaults to the version in kubeConfig.   insecure  - whether to trust kubernetes certificates (default:  false )   auth  - client auth file to use. Set auth if the service accounts are not usable.\n*  useServiceAccount  - whether to use the service account token if one is mounted at  /var/run/secrets/kubernetes.io/serviceaccount/token  (default:  false )  There is also a sub-source for metrics -  kubernetes.summary_api  - that uses a slightly different, memory-efficient API for passing data from Kubelet/cAdvisor to Heapster. It supports the same set of options as  kubernetes . Sample usage:   - --source=kubernetes.summary_api:''", 
            "title": "Kubernetes"
        }
    ]
}